# -*- coding: utf-8 -*-
"""Copy of LDM-PIR CT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DdzPnNW3XbZXBf5MxMq5eqHUSWE9Wra0
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# pip install git+https://github.com/matthieutrs/ram

import deepinv as dinv

# run on cpu (Colab doesn't have GPU by default)
device = 'cpu'

# load CT scan image
url = "https://raw.githubusercontent.com/rajavavek/Project-Data/main/ct%20scan.jpg"
x = dinv.utils.load_url_image(url=url, img_size=256).to(device)

# create forward operator
physics = dinv.physics.Inpainting(tensor_size=(3, 256, 256), mask=.5,
                                  noise_model=dinv.physics.GaussianNoise(.05), device=device)

# generate measurement
y = physics(x)

# plot
dinv.utils.plot([x, y], ["Original", "Measurement"])

from ram import RAM


# Load the pretrained model
model = RAM(device=device)

# run inference
x_hat = model(y, physics=physics)

# plot
dinv.utils.plot([x, y, x_hat], ["Original", "Measurement", "Reconstruction"])

from ram import finetune

physics = dinv.physics.Demosaicing(img_size=(256, 256), noise_model=dinv.physics.GaussianNoise(.05))

y = physics(x)

# run zero-shot inference
x_zero_shot = model(y, physics=physics)

# use a GPU for faster finetuning
# we only finetune for 1 gradient steps here due to CPU speed constraints
model = finetune(model, y, physics, max_iter=1, noise_loss='SURE', transform='shift', device=device)

# run inference
x_finetuned = model(y, physics=physics)

# compute PSNR
zero_shot_psnr = dinv.metric.PSNR()(x, x_zero_shot).item()
finetuned_psnr = dinv.metric.PSNR()(x, x_finetuned).item()

print(f"PSNR zero-shot {zero_shot_psnr:2f} dB, finetuned {finetuned_psnr:2f} dB")

# plot
dinv.utils.plot([x, y, x_zero_shot, x_finetuned], ["Original", "Measurement", "Zero-Shot", "Finetuned"])

import matplotlib.pyplot as plt
import deepinv as dinv
import requests
from io import BytesIO
from PIL import Image

# Load CT scan image
url = "https://raw.githubusercontent.com/rajavavek/Project-Data/main/ct%20scan.jpg"
response = requests.get(url)
img = Image.open(BytesIO(response.content))
img = img.resize((256, 256))  # Resize to match model input size

# Load model output (simulate this part for comparison)
# Assuming x is the input image and y is the output from LDM-PIR
x = dinv.utils.load_url_image(url=url, img_size=256).to('cpu')
physics = dinv.physics.Inpainting(tensor_size=(3, 256, 256), mask=.5,
                                  noise_model=dinv.physics.GaussianNoise(.05), device='cpu')
y = physics(x)

# Plot side-by-side comparison
plt.figure(figsize=(12, 6))

# Original Image
plt.subplot(1, 2, 1)
plt.imshow(img)
plt.title("Original CT Image")
plt.axis('off')

# Reconstructed Image
plt.subplot(1, 2, 2)
plt.imshow(y.squeeze().detach().numpy().transpose(1, 2, 0))  # Convert tensor to numpy
plt.title("Reconstructed Image (LDM-PIR)")
plt.axis('off')

plt.show()

import kagglehub

# Download latest version
path = kagglehub.dataset_download("mohamedhanyyy/chest-ctscan-images")

print("Path to dataset files:", path)

import os

# Path to the dataset
dataset_path = '/kaggle/input/chest-ctscan-images'

# List all files in the dataset folder
files = os.listdir(dataset_path)
print("Files in dataset:", files)